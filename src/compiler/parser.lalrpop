use std::str::FromStr;
use ast::Expression;

grammar;

pub expressions: Vec<Expression> = {
    expression* => <>
};

expression: Expression = {
    "(" <o:op_nullary> ")" => {
        Expression::NullaryOp(o)
    },
    "(def" <n:identifier> "(" <p:variables> ")" <b:expressions> ")" => {
        Expression::FunctionDefinition(n, p, b)
    },
    "(let" "(" <a:assignments> ")" <b:expressions> ")" => {
        Expression::VariableAssignment(a,b)
    },
    "(" <o:op_binary> <l:expression> <r:expression> ")" => {
        Expression::BinaryOp(o, Box::new(l), Box::new(r))
    },
    "(" <o:op_unary> <l:expression> ")" => {
        Expression::UnaryOp(o, Box::new(l))
    },
    "(" <f:identifier> <v:expressions> ")" => {
        Expression::Function(f, v)
    },
    "(if" <c:expression> "(" <t:expressions> ")" "(" <f:expressions> ")" ")" => {
        Expression::Conditional(Box::new(c),t,f)
    },
    identifier => {
        Expression::Variable(<>)
    },
    integer => {
        Expression::Integer(<>)
    }
};

variables: Vec<String> = {
    identifier* => <>
};

assignments: Vec<(String,Expression)> = {
    var_assign* => <>
};

var_assign: (String, Expression) = {
    "(" <i:identifier> <e:expression> ")" => (i,e)
};

identifier: String = {
    r"[a-zA-Z]+" => <>.to_string(),
};

op_binary: String = {
    r"[\+\-\*/&\|]" => <>.to_string(),
    "==" => <>.to_string(),
    "!=" => <>.to_string(),
    "<=" => <>.to_string(),
    ">=" => <>.to_string(),
    "<" => <>.to_string(),
    ">" => <>.to_string()
};

op_unary: String = {
    "~" => <>.to_string(),
    "write" => <>.to_string()
};

op_nullary: String = {
    "read" => <>.to_string()
};

integer: i64 = {
    r"\d+" => i64::from_str(<>).unwrap(),
};
